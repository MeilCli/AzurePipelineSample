trigger: none

pr:
  branches:
    include:
    - master
  paths:
    include:
    - AzurePipelineSample.NETCore.Console/*
    - AzurePipelineSample.NETCore.Console.Test/*

variables:
  buildConfiguration: 'CI_Release'
  libProject: 'AzurePipelineSample.NETStandard.Lib'
  libBinaryDirectory: '$(libProject)/bin/$(buildConfiguration)/netstandard2.0'
  libTestProject: 'AzurePipelineSample.NETStandard.Lib.Test'
  libTestBinaryDirectory: '$(libTestProject)/bin/$(buildConfiguration)/netcoreapp2.1'
  coreProject: 'AzurePipelineSample.NETStandard.Core'
  coreBinaryDirectory: '$(coreProject)/bin/$(buildConfiguration)/netstandard2.0'
  coreTestProject: 'AzurePipelineSample.NETStandard.Core.Test'
  coreTestBinaryDirectory: '$(coreTestProject)/bin/$(buildConfiguration)/netcoreapp2.1'
  consoleProject: 'AzurePipelineSample.NETCore.Console'
  consoleBinaryDirectory: '$(consoleProject)/bin/$(buildConfiguration)/netcoreapp2.1'
  consoleTestProject: 'AzurePipelineSample.NETCore.Console.Test'
  consoleTestBinaryDirectory: '$(consoleTestProject)/bin/$(buildConfiguration)/netcoreapp2.1'

stages:
- stage: Build
  jobs:
  - job: Build_Lib
    displayName: Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'build $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '$(libProject)/*.csproj'
        arguments: '-c $(buildConfiguration)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'

  - job: Build_Lib_Test
    displayName: Lib Test
    dependsOn: Build_Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - script: 'dotnet publish $(libTestProject)/$(libTestProject).csproj -c $(buildConfiguration)'
      displayName: 'build $(buildConfiguration)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'libTestBinary'
        targetPath: '$(libTestBinaryDirectory)'

  - job: Build_Core
    displayName: Core
    dependsOn: Build_Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - task: DotNetCoreCLI@2
      displayName: 'build $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '$(coreProject)/*.csproj'
        arguments: '-c $(buildConfiguration)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'coreBinary'
        targetPath: '$(coreBinaryDirectory)'

  - job: Build_Core_Test
    displayName: Core Test
    dependsOn: Build_Core
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'coreBinary'
        targetPath: '$(coreBinaryDirectory)'
    - script: 'dotnet publish $(coreTestProject)/$(coreTestProject).csproj -c $(buildConfiguration)'
      displayName: 'build $(buildConfiguration)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'coreTestBinary'
        targetPath: '$(coreTestBinaryDirectory)'

  - job: Build_Console
    displayName: Console
    dependsOn: Build_Core
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'coreBinary'
        targetPath: '$(coreBinaryDirectory)'
    - task: DotNetCoreCLI@2
      displayName: 'build $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: '$(consoleProject)/*.csproj'
        arguments: '-c $(buildConfiguration)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'consoleBinary'
        targetPath: '$(consoleBinaryDirectory)'

  - job: Build_Console_Test
    displayName: Console Test
    dependsOn: Build_Console
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'coreBinary'
        targetPath: '$(coreBinaryDirectory)'
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'consoleBinary'
        targetPath: '$(consoleBinaryDirectory)'
    - script: 'dotnet publish $(consoleTestProject)/$(consoleTestProject).csproj -c $(buildConfiguration)'
      displayName: 'build $(buildConfiguration)'
    - task: PublishPipelineArtifact@0
      inputs:
        artifactName: 'consoleTestBinary'
        targetPath: '$(consoleTestBinaryDirectory)'


- stage: Test
  dependsOn: Build
  jobs:
  - job: Test_Lib
    displayName: Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'libTestBinary'
        targetPath: '$(libTestBinaryDirectory)'
    - script: 'dotnet vstest $(System.DefaultWorkingDirectory)/$(libTestBinaryDirectory)/publish/$(libTestProject).dll /logger:trx /ResultsDirectory:$(System.DefaultWorkingDirectory)/Results'
      displayName: Run Test
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

  - job: Test_Core
    displayName: Core
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'coreTestBinary'
        targetPath: '$(coreTestBinaryDirectory)'
    - script: 'dotnet vstest $(System.DefaultWorkingDirectory)/$(coreTestBinaryDirectory)/publish/$(coreTestProject).dll /logger:trx /ResultsDirectory:$(System.DefaultWorkingDirectory)/Results'
      displayName: Run Test
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'

  - job: Test_Console
    displayName: Console
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0
      inputs:
        artifactName: 'consoleTestBinary'
        targetPath: '$(consoleTestBinaryDirectory)'
    - script: 'dotnet vstest $(System.DefaultWorkingDirectory)/$(consoleTestBinaryDirectory)/publish/$(consoleTestProject).dll /logger:trx /ResultsDirectory:$(System.DefaultWorkingDirectory)/Results'
      displayName: Run Test
    - task: PublishTestResults@2
      inputs:
        testRunner: VSTest
        testResultsFiles: '**/*.trx'