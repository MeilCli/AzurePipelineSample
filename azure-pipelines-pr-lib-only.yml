trigger: none

pr:
  branches:
    include:
    - master # PRのターゲットブランチを指定
  paths:
    include:
    - AzurePipelineSample.NETStandard.Lib/*
    - AzurePipelineSample.NETStandard.Lib.Test/*
    exclude:
    - AzurePipelineSample.NETStandard.Lib.Core/*
    - AzurePipelineSample.NETStandard.Lib.Test/*
    - AzurePipelineSample.NETCore.Console/*
    - AzurePipelineSample.NETCore.Console.Test/*

variables:
  buildConfiguration: 'CI_Release'
  libBinaryDirectory: 'AzurePipelineSample.NETStandard.Lib/bin/$(buildConfiguration)/netstandard2.0'
  libTestBinaryDirectory: 'AzurePipelineSample.NETStandard.Lib.Test/bin/$(buildConfiguration)/netcoreapp2.1'
  libTestObjectDirectory: 'AzurePipelineSample.NETStandard.Lib.Test/obj'

stages:
- stage: Build
  jobs:
  - job: Build_Lib
    displayName: Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DotNetCoreCLI@2
      displayName: 'build $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: 'AzurePipelineSample.NETStandard.Lib/*.csproj'
        arguments: '-c $(buildConfiguration)'
    - task: PublishPipelineArtifact@0 # 生成したバイナリーをJob/Stage間で再利用する
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'

  - job: Build_Lib_Test
    displayName: Lib Test
    dependsOn: Build_Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0 # Build_Libで生成したバイナリーを配置する
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - task: DotNetCoreCLI@2
      displayName: 'build $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: 'AzurePipelineSample.NETStandard.Lib.Test/*.csproj'
        arguments: '-c $(buildConfiguration)'
    - task: PublishPipelineArtifact@0 # 生成したバイナリーをJob/Stage間で再利用する
      inputs:
        artifactName: 'libTestBinary'
        targetPath: '$(libTestBinaryDirectory)'
    - task: PublishPipelineArtifact@0 # 生成したバイナリーをJob/Stage間で再利用する
      inputs:
        artifactName: 'libTestObject'
        targetPath: '$(libTestObjectDirectory)'

  - job: Build_Core
    displayName: Core
    dependsOn: Build_Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0 # Build_Libで生成したバイナリーを配置する
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - task: DotNetCoreCLI@2
      displayName: 'build $(buildConfiguration)'
      inputs:
        command: 'build'
        projects: 'AzurePipelineSample.NETStandard.Core/*.csproj'
        arguments: '-c $(buildConfiguration)'


- stage: Test
  dependsOn: Build
  jobs:
  - job: Test_Lib
    displayName: Lib
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: DownloadPipelineArtifact@0 # Build_Libで生成したバイナリーを配置する
      inputs:
        artifactName: 'libBinary'
        targetPath: '$(libBinaryDirectory)'
    - task: DownloadPipelineArtifact@0 # Build_Lib_Testで生成したバイナリーを配置する
      inputs:
        artifactName: 'libTestBinary'
        targetPath: '$(libTestBinaryDirectory)'
    - task: DownloadPipelineArtifact@0 # Build_Lib_Testで生成したオブジェクトを配置する
      inputs:
        artifactName: 'libTestObject'
        targetPath: '$(libTestObjectDirectory)'
    - task: DotNetCoreInstaller@1 # .NET Coreのバージョンが低いとなぜかスキップされてしまうのでバージョンup
      displayName: '.NET Core Sdk Version Select'
      inputs:
        packageType: sdk
        version: 2.x
    - task: DotNetCoreCLI@2
      inputs:
        command: 'test'
        projects: 'AzurePipelineSample.NETStandard.Lib.Test/*.csproj'
        arguments: '-c $(buildConfiguration) --no-build -v n'